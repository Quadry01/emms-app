"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/BQuery/page",{

/***/ "(app-pages-browser)/./app/fetchMail.jsx":
/*!***************************!*\
  !*** ./app/fetchMail.jsx ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useMailsBySender: () => (/* binding */ useMailsBySender)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_supabaseClient_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! .//lib/supabaseClient.js */ \"(app-pages-browser)/./app/lib/supabaseClient.js\");\n/* __next_internal_client_entry_do_not_use__ useMailsBySender auto */ var _s = $RefreshSig$();\n\n\nfunction removeDoubleQuotesAndLeaveChars(str) {\n    return str.replace(/\"/g, '');\n}\n(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n    if (true) {\n        const officeID1 = sessionStorage.getItem('officeID');\n        setStoredValue(value);\n    }\n}, []); // Empty dependency array ensures this runs only once after mount\n//  const officeID = sessionStorage.getItem('officeID');\nconst filteredOfficeID = removeDoubleQuotesAndLeaveChars(officeID);\n// const fetchMailById = async (mailId) => {\n//    try {\n//       const { data, error } = await supabase\n//          .from(filteredOfficeID)\n//          .select('*')\n//          .eq('mail_id', mailId); // Assumes 'id' is the column for mail ID\n//       if (error) {\n//          console.error('Error fetching mail by ID:', error);\n//          return null;\n//       }\n//       return data;\n//    } catch (err) {\n//       console.error('Unexpected error:', err);\n//       return null;\n//    }\n// };\n// export const useMailById = (mailId) => {\n//    const [mailData, setMailData] = useState(null);\n//    const [loading, setLoading] = useState(true);\n//    useEffect(() => {\n//       const fetchData = async () => {\n//          setLoading(true);\n//          const data = await fetchMailById(mailId);\n//          setMailData(data);\n//          setLoading(false);\n//       };\n//       if (mailId) fetchData();\n//    }, [mailId]);\n//    return { mailData, loading };\n// };\n// FOR BATCH QUERY\n// Fetch mails by sender\nconst fetchMailsBySender = async (sender)=>{\n    try {\n        const { data, error } = await _lib_supabaseClient_js__WEBPACK_IMPORTED_MODULE_1__.supabase.from(filteredOfficeID).select('*').ilike('sender', \"%\".concat(sender, \"%\")); // Use ilike for case-insensitive search\n        if (error) {\n            console.error('Error fetching mails by sender:', error);\n            return null;\n        }\n        return data;\n    } catch (err) {\n        console.error('Unexpected error:', err);\n        return null;\n    }\n};\n// Custom hook to fetch mails by sender\nconst useMailsBySender = (sender)=>{\n    _s();\n    const [mailData, setMailData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useMailsBySender.useEffect\": ()=>{\n            const fetchData = {\n                \"useMailsBySender.useEffect.fetchData\": async ()=>{\n                    setLoading(true);\n                    const data = await fetchMailsBySender(sender);\n                    setMailData(data);\n                    setLoading(false);\n                }\n            }[\"useMailsBySender.useEffect.fetchData\"];\n            if (sender) fetchData();\n        }\n    }[\"useMailsBySender.useEffect\"], [\n        sender\n    ]); // Only rerun if the sender changes\n    return {\n        mailData,\n        loading\n    };\n};\n_s(useMailsBySender, \"6DGCqk9wWBnnn33ihIjtrXB12lc=\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9mZXRjaE1haWwuanN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQzRDO0FBQ1E7QUFHcEQsU0FBU0csZ0NBQWdDQyxHQUFHO0lBQzFDLE9BQU9BLElBQUlDLE9BQU8sQ0FBQyxNQUFNO0FBQzNCO0FBR0NKLGdEQUFTQSxDQUFDO0lBQ1AsSUFBSSxJQUE2QixFQUFFO1FBQ3RDLE1BQU1LLFlBQVdDLGVBQWVDLE9BQU8sQ0FBQztRQUNuQ0MsZUFBZUM7SUFDakI7QUFDRixHQUFHLEVBQUUsR0FBRyxpRUFBaUU7QUFDM0Usd0RBQXdEO0FBRXRELE1BQU1DLG1CQUFtQlIsZ0NBQWdDRztBQUczRCw0Q0FBNEM7QUFJNUMsV0FBVztBQUNYLCtDQUErQztBQUMvQyxtQ0FBbUM7QUFDbkMsd0JBQXdCO0FBQ3hCLDZFQUE2RTtBQUU3RSxxQkFBcUI7QUFDckIsK0RBQStEO0FBQy9ELHdCQUF3QjtBQUN4QixVQUFVO0FBRVYscUJBQXFCO0FBQ3JCLHFCQUFxQjtBQUNyQixpREFBaUQ7QUFDakQscUJBQXFCO0FBQ3JCLE9BQU87QUFDUCxLQUFLO0FBRUwsMkNBQTJDO0FBQzNDLHFEQUFxRDtBQUNyRCxtREFBbUQ7QUFFbkQsdUJBQXVCO0FBQ3ZCLHdDQUF3QztBQUN4Qyw2QkFBNkI7QUFDN0IscURBQXFEO0FBQ3JELDhCQUE4QjtBQUM5Qiw4QkFBOEI7QUFDOUIsV0FBVztBQUVYLGlDQUFpQztBQUNqQyxtQkFBbUI7QUFFbkIsbUNBQW1DO0FBQ25DLEtBQUs7QUFHTCxrQkFBa0I7QUFDbEIsd0JBQXdCO0FBQ3hCLE1BQU1NLHFCQUFxQixPQUFPQztJQUMvQixJQUFJO1FBQ0QsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLEtBQUssRUFBRSxHQUFHLE1BQU1iLDREQUFRQSxDQUNsQ2MsSUFBSSxDQUFDTCxrQkFDTE0sTUFBTSxDQUFDLEtBQ1BDLEtBQUssQ0FBQyxVQUFVLElBQVcsT0FBUEwsUUFBTyxPQUFLLHdDQUF3QztRQUU1RSxJQUFJRSxPQUFPO1lBQ1JJLFFBQVFKLEtBQUssQ0FBQyxtQ0FBbUNBO1lBQ2pELE9BQU87UUFDVjtRQUVBLE9BQU9EO0lBQ1YsRUFBRSxPQUFPTSxLQUFLO1FBQ1hELFFBQVFKLEtBQUssQ0FBQyxxQkFBcUJLO1FBQ25DLE9BQU87SUFDVjtBQUNIO0FBRUEsdUNBQXVDO0FBQ2hDLE1BQU1DLG1CQUFtQixDQUFDUjs7SUFDOUIsTUFBTSxDQUFDUyxVQUFVQyxZQUFZLEdBQUd2QiwrQ0FBUUEsQ0FBQztJQUN6QyxNQUFNLENBQUN3QixTQUFTQyxXQUFXLEdBQUd6QiwrQ0FBUUEsQ0FBQztJQUV2Q0MsZ0RBQVNBO3NDQUFDO1lBQ1AsTUFBTXlCO3dEQUFZO29CQUNmRCxXQUFXO29CQUNYLE1BQU1YLE9BQU8sTUFBTUYsbUJBQW1CQztvQkFDdENVLFlBQVlUO29CQUNaVyxXQUFXO2dCQUNkOztZQUVBLElBQUlaLFFBQVFhO1FBQ2Y7cUNBQUc7UUFBQ2I7S0FBTyxHQUFHLG1DQUFtQztJQUVqRCxPQUFPO1FBQUVTO1FBQVVFO0lBQVE7QUFDOUIsRUFBRTtHQWhCV0giLCJzb3VyY2VzIjpbIi9Vc2Vycy9hcHBsZV8xL0Rlc2t0b3AvZW1tcy1hcHAvYXBwL2ZldGNoTWFpbC5qc3giXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCJcbmltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBzdXBhYmFzZSB9IGZyb20gJy4vL2xpYi9zdXBhYmFzZUNsaWVudC5qcyc7IFxuXG5cbmZ1bmN0aW9uIHJlbW92ZURvdWJsZVF1b3Rlc0FuZExlYXZlQ2hhcnMoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXCIvZywgJycpO1xufVxuXG5cbiB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuIGNvbnN0IG9mZmljZUlEID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnb2ZmaWNlSUQnKTtcbiAgICAgIHNldFN0b3JlZFZhbHVlKHZhbHVlKTtcbiAgICB9XG4gIH0sIFtdKTsgLy8gRW1wdHkgZGVwZW5kZW5jeSBhcnJheSBlbnN1cmVzIHRoaXMgcnVucyBvbmx5IG9uY2UgYWZ0ZXIgbW91bnRcbi8vICBjb25zdCBvZmZpY2VJRCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ29mZmljZUlEJyk7XG5cbiAgY29uc3QgZmlsdGVyZWRPZmZpY2VJRCA9IHJlbW92ZURvdWJsZVF1b3Rlc0FuZExlYXZlQ2hhcnMob2ZmaWNlSUQpXG5cblxuLy8gY29uc3QgZmV0Y2hNYWlsQnlJZCA9IGFzeW5jIChtYWlsSWQpID0+IHtcblxuICBcblxuLy8gICAgdHJ5IHtcbi8vICAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4vLyAgICAgICAgICAuZnJvbShmaWx0ZXJlZE9mZmljZUlEKVxuLy8gICAgICAgICAgLnNlbGVjdCgnKicpXG4vLyAgICAgICAgICAuZXEoJ21haWxfaWQnLCBtYWlsSWQpOyAvLyBBc3N1bWVzICdpZCcgaXMgdGhlIGNvbHVtbiBmb3IgbWFpbCBJRFxuXG4vLyAgICAgICBpZiAoZXJyb3IpIHtcbi8vICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIG1haWwgYnkgSUQ6JywgZXJyb3IpO1xuLy8gICAgICAgICAgcmV0dXJuIG51bGw7XG4vLyAgICAgICB9XG5cbi8vICAgICAgIHJldHVybiBkYXRhO1xuLy8gICAgfSBjYXRjaCAoZXJyKSB7XG4vLyAgICAgICBjb25zb2xlLmVycm9yKCdVbmV4cGVjdGVkIGVycm9yOicsIGVycik7XG4vLyAgICAgICByZXR1cm4gbnVsbDtcbi8vICAgIH1cbi8vIH07XG5cbi8vIGV4cG9ydCBjb25zdCB1c2VNYWlsQnlJZCA9IChtYWlsSWQpID0+IHtcbi8vICAgIGNvbnN0IFttYWlsRGF0YSwgc2V0TWFpbERhdGFdID0gdXNlU3RhdGUobnVsbCk7XG4vLyAgICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZSh0cnVlKTtcblxuLy8gICAgdXNlRWZmZWN0KCgpID0+IHtcbi8vICAgICAgIGNvbnN0IGZldGNoRGF0YSA9IGFzeW5jICgpID0+IHtcbi8vICAgICAgICAgIHNldExvYWRpbmcodHJ1ZSk7XG4vLyAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZmV0Y2hNYWlsQnlJZChtYWlsSWQpO1xuLy8gICAgICAgICAgc2V0TWFpbERhdGEoZGF0YSk7XG4vLyAgICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbi8vICAgICAgIH07XG5cbi8vICAgICAgIGlmIChtYWlsSWQpIGZldGNoRGF0YSgpO1xuLy8gICAgfSwgW21haWxJZF0pO1xuXG4vLyAgICByZXR1cm4geyBtYWlsRGF0YSwgbG9hZGluZyB9O1xuLy8gfTtcblxuXG4vLyBGT1IgQkFUQ0ggUVVFUllcbi8vIEZldGNoIG1haWxzIGJ5IHNlbmRlclxuY29uc3QgZmV0Y2hNYWlsc0J5U2VuZGVyID0gYXN5bmMgKHNlbmRlcikgPT4ge1xuICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YSwgZXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAgICAuZnJvbShmaWx0ZXJlZE9mZmljZUlEKVxuICAgICAgICAgLnNlbGVjdCgnKicpXG4gICAgICAgICAuaWxpa2UoJ3NlbmRlcicsIGAlJHtzZW5kZXJ9JWApOyAvLyBVc2UgaWxpa2UgZm9yIGNhc2UtaW5zZW5zaXRpdmUgc2VhcmNoXG5cbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgbWFpbHMgYnkgc2VuZGVyOicsIGVycm9yKTtcbiAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCBlcnJvcjonLCBlcnIpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICB9XG59O1xuXG4vLyBDdXN0b20gaG9vayB0byBmZXRjaCBtYWlscyBieSBzZW5kZXJcbmV4cG9ydCBjb25zdCB1c2VNYWlsc0J5U2VuZGVyID0gKHNlbmRlcikgPT4ge1xuICAgY29uc3QgW21haWxEYXRhLCBzZXRNYWlsRGF0YV0gPSB1c2VTdGF0ZShudWxsKTtcbiAgIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuXG4gICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgY29uc3QgZmV0Y2hEYXRhID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgc2V0TG9hZGluZyh0cnVlKTtcbiAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBmZXRjaE1haWxzQnlTZW5kZXIoc2VuZGVyKTtcbiAgICAgICAgIHNldE1haWxEYXRhKGRhdGEpO1xuICAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICB9O1xuXG4gICAgICBpZiAoc2VuZGVyKSBmZXRjaERhdGEoKTtcbiAgIH0sIFtzZW5kZXJdKTsgLy8gT25seSByZXJ1biBpZiB0aGUgc2VuZGVyIGNoYW5nZXNcblxuICAgcmV0dXJuIHsgbWFpbERhdGEsIGxvYWRpbmcgfTtcbn07XG4iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJzdXBhYmFzZSIsInJlbW92ZURvdWJsZVF1b3Rlc0FuZExlYXZlQ2hhcnMiLCJzdHIiLCJyZXBsYWNlIiwib2ZmaWNlSUQiLCJzZXNzaW9uU3RvcmFnZSIsImdldEl0ZW0iLCJzZXRTdG9yZWRWYWx1ZSIsInZhbHVlIiwiZmlsdGVyZWRPZmZpY2VJRCIsImZldGNoTWFpbHNCeVNlbmRlciIsInNlbmRlciIsImRhdGEiLCJlcnJvciIsImZyb20iLCJzZWxlY3QiLCJpbGlrZSIsImNvbnNvbGUiLCJlcnIiLCJ1c2VNYWlsc0J5U2VuZGVyIiwibWFpbERhdGEiLCJzZXRNYWlsRGF0YSIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwiZmV0Y2hEYXRhIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/fetchMail.jsx\n"));

/***/ })

});